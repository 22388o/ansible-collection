..
.. SPDX-License-Identifier: Apache-2.0
..

:github_url: https://github.com/IBM-Blockchain/ansible-collection/edit/master/plugins/modules/installed_chaincode.py


installed_chaincode -- Manage a chaincode installed on a Hyperledger Fabric peer
================================================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Install a chaincode on a Hyperledger Fabric peer by using the IBM Blockchain Platform.

This module works with the IBM Blockchain Platform managed service running in IBM Cloud, or the IBM Blockchain Platform software running in a Red Hat OpenShift or Kubernetes cluster.






Parameters
----------

  api_endpoint (optional, str, None)
    The URL for the IBM Blockchain Platform console.


  api_authtype (optional, str, None)
    ``ibmcloud`` - Authenticate to the IBM Blockchain Platform console using IBM Cloud authentication. You must provide a valid API key using *api_key*.

    ``basic`` - Authenticate to the IBM Blockchain Platform console using basic authentication. You must provide both a valid API key using *api_key* and API secret using *api_secret*.


  api_key (optional, str, None)
    The API key for the IBM Blockchain Platform console.


  api_secret (optional, str, None)
    The API secret for the IBM Blockchain Platform console.

    Only required when *api_authtype* is ``basic``.


  api_timeout (optional, integer, 60)
    The timeout, in seconds, to use when interacting with the IBM Blockchain Platform console.


  api_token_endpoint (optional, str, https://iam.cloud.ibm.com/identity/token)
    The IBM Cloud IAM token endpoint to use when using IBM Cloud authentication.

    Only required when *api_authtype* is ``ibmcloud``, and you are using IBM internal staging servers for testing.


  state (optional, str, present)
    ``absent`` - If a chaincode matching the specified name and version is installed, then an error will be thrown, as it is not possible to uninstall chaincode.

    ``present`` - Asserts that a chaincode matching the specified name and version is installed. If it is not installed, then the chaincode is installed using the chaincode package at the specified path. If it is installed, then the chaincode is checked to make sure that the installed chaincode matches the chaincode in the chaincode package at the specified path. If the installed chaincode does not match, then an error will be thrown, as it is not possible to update installed chaincode.


  peer (optional, raw, None)
    The peer to use to manage the installed chaincode.

    You can pass a string, which is the display name of a peer registered with the IBM Blockchain Platform console.

    You can also pass a dict, which must match the result format of one of the :ref:`peer_info <peer_info_module>` or :ref:`peer <peer_module>` modules.


  identity (optional, raw, None)
    The identity to use when interacting with the peer.

    You can pass a string, which is the path to the JSON file where the enrolled identity is stored.

    You can also pass a dict, which must match the result format of one of the :ref:`enrolled_identity_info <enrolled_identity_info_module>` or :ref:`enrolled_identity <enrolled_identity_module>` modules.


  msp_id (optional, str, None)
    The MSP ID to use for interacting with the peer.


  name (optional, str, None)
    The name of the chaincode.

    Only required when *state* is ``absent``.


  version (optional, str, None)
    The version of the chaincode.

    Only required when *state* is ``absent``.


  path (optional, str, None)
    The path to the chaincode package.

    Only required when *state* is ``present``.









Examples
--------

.. code-block:: yaml+jinja

    



Return Values
-------------

  installed_chaincode (, dict, )
    The installed chaincode.


    name (, str, )
      The name of the chaincode.


    version (, str, )
      The version of the chaincode.


    id (, str, )
      The ID of the chaincode.






Status
------




- This module is not guaranteed to have a backwards compatible interface. *[preview]*


- This module is maintained by community.



Authors
~~~~~~~

- Simon Stone (@sstone1)

