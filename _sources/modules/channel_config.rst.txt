..
.. SPDX-License-Identifier: Apache-2.0
..

:github_url: https://github.com/IBM-Blockchain/ansible-collection/edit/master/plugins/modules/channel_config.py


channel_config -- Manage the configuration for a Hyperledger Fabric channel
===========================================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Fetch and update the configuration for a Hyperledger Fabric channel by using the IBM Blockchain Platform.

This module works with the IBM Blockchain Platform managed service running in IBM Cloud, or the IBM Blockchain Platform software running in a Red Hat OpenShift or Kubernetes cluster.






Parameters
----------

  api_endpoint (optional, str, None)
    The URL for the IBM Blockchain Platform console.


  api_authtype (optional, str, None)
    ``ibmcloud`` - Authenticate to the IBM Blockchain Platform console using IBM Cloud authentication. You must provide a valid API key using *api_key*.

    ``basic`` - Authenticate to the IBM Blockchain Platform console using basic authentication. You must provide both a valid API key using *api_key* and API secret using *api_secret*.


  api_key (optional, str, None)
    The API key for the IBM Blockchain Platform console.


  api_secret (optional, str, None)
    The API secret for the IBM Blockchain Platform console.

    Only required when *api_authtype* is ``basic``.


  api_timeout (optional, integer, 60)
    The timeout, in seconds, to use when interacting with the IBM Blockchain Platform console.


  api_token_endpoint (optional, str, https://iam.cloud.ibm.com/identity/token)
    The IBM Cloud IAM token endpoint to use when using IBM Cloud authentication.

    Only required when *api_authtype* is ``ibmcloud``, and you are using IBM internal staging servers for testing.


  operation (optional, str, None)
    ``create`` - Create a channel configuration update transaction for a new channel.

    ``fetch`` - Fetch the current channel configuration to the specified *path*.

    ``compute_update`` - Compute a channel configuration update transaction using the original configuration at *origin* and the updated configuration at *updated*.

    ``sign_update`` - Sign a channel configuration update transaction.

    ``apply_update`` - Apply a channel configuration update transaction.


  ordering_service (optional, raw, None)
    The ordering service to use to manage the channel.

    You can pass a string, which is the cluster name of a ordering service registered with the IBM Blockchain Platform console.

    You can also pass a list, which must match the result format of one of the :ref:`ordering_service_info <ordering_service_info_module>` or :ref:`ordering_service <ordering_service_module>` modules.

    Only required when *operation* is ``fetch`` or ``apply_update``.


  identity (optional, raw, None)
    The identity to use when interacting with the ordering service or for signing channel configuration update transactions.

    You can pass a string, which is the path to the JSON file where the enrolled identity is stored.

    You can also pass a dict, which must match the result format of one of the :ref:`enrolled_identity_info <enrolled_identity_info_module>` or :ref:`enrolled_identity <enrolled_identity_module>` modules.

    Only required when *operation* is ``fetch``, ``sign_update``, or ``apply_update``.


  msp_id (optional, str, None)
    The MSP ID to use for interacting with the ordering service or for signing channel configuration update transactions.

    Only required when *operation* is ``fetch``, ``sign``, or ``apply_update``.


  name (optional, str, None)
    The name of the channel.


  path (optional, str, None)
    The path to the file where the channel configuration or the channel configuration update transaction will be stored.


  original (optional, str, None)
    The path to the file where the original channel configuration is stored.

    Only required when *operation* is ``compute_update``.


  updated (optional, str, None)
    The path to the file where the updated channel configuration is stored.

    Only required when *operation* is ``compute_update``.


  organizations (optional, list, None)
    The list of organizations to add as members in the new channel.

    The organizations must all be members of the consortium.

    You can pass strings, which are the names of organizations that are registered with the IBM Blockchain Platform console.

    You can also pass a dict, which must match the result format of one of the :ref:`organization_info <organization_info_module>` or :ref:`organization <organization_module>` modules.

    Only required when *operation* is ``create``.


  policies (optional, dict, None)
    The set of policies to add to the new channel. The keys are the policy names, and the values are the policies.

    You can pass strings, which are paths to JSON files containing policies in the Hyperledger Fabric format (common.Policy).

    You can also pass a dict, which must correspond to a parsed policy in the Hyperledger Fabric format (common.Policy).

    You must provide at least an Admins, Writers, and Readers policy.

    Only required when *operation* is ``create``.









Examples
--------

.. code-block:: yaml+jinja

    



Return Values
-------------

  path (, str, )
    The path to the file where the channel configuration or the channel configuration update transaction is stored.





Status
------




- This  is not guaranteed to have a backwards compatible interface. *[preview]*


- This  is maintained by community.



Authors
~~~~~~~

- Simon Stone (@sstone1)

